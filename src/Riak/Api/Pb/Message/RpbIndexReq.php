<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: riak_kv.proto

namespace Basho\Riak\Api\Pb\Message;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Secondary Index query request
 *
 * Generated from protobuf message <code>RpbIndexReq</code>
 */
class RpbIndexReq extends \Google\Protobuf\Internal\Message
{
    /**
     * Generated from protobuf field <code>bytes bucket = 1;</code>
     */
    protected $bucket = '';
    /**
     * Generated from protobuf field <code>bytes index = 2;</code>
     */
    protected $index = '';
    /**
     * Generated from protobuf field <code>.RpbIndexReq.IndexQueryType qtype = 3;</code>
     */
    protected $qtype = 0;
    /**
     * key here means equals value for index?
     *
     * Generated from protobuf field <code>bytes key = 4;</code>
     */
    protected $key = null;
    /**
     * Generated from protobuf field <code>bytes range_min = 5;</code>
     */
    protected $range_min = null;
    /**
     * Generated from protobuf field <code>bytes range_max = 6;</code>
     */
    protected $range_max = null;
    /**
     * Generated from protobuf field <code>bool return_terms = 7;</code>
     */
    protected $return_terms = null;
    /**
     * Generated from protobuf field <code>bool stream = 8;</code>
     */
    protected $stream = null;
    /**
     * Generated from protobuf field <code>uint32 max_results = 9;</code>
     */
    protected $max_results = null;
    /**
     * Generated from protobuf field <code>bytes continuation = 10;</code>
     */
    protected $continuation = null;
    /**
     * Generated from protobuf field <code>uint32 timeout = 11;</code>
     */
    protected $timeout = null;
    /**
     * Bucket type, if not set we assume the 'default' type
     *
     * Generated from protobuf field <code>bytes type = 12;</code>
     */
    protected $type = null;
    /**
     * Generated from protobuf field <code>bytes term_regex = 13;</code>
     */
    protected $term_regex = null;
    /**
     * Whether to use pagination sort for non-paginated queries
     *
     * Generated from protobuf field <code>bool pagination_sort = 14;</code>
     */
    protected $pagination_sort = null;
    /**
     * parallel extraction extension
     *
     * Generated from protobuf field <code>bytes cover_context = 15;</code>
     */
    protected $cover_context = null;
    /**
     * Return values with keys, only works with $bucket/$key index queries
     *
     * Generated from protobuf field <code>bool return_body = 16;</code>
     */
    protected $return_body = null;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $bucket
     *     @type string $index
     *     @type int $qtype
     *     @type string $key
     *           key here means equals value for index?
     *     @type string $range_min
     *     @type string $range_max
     *     @type bool $return_terms
     *     @type bool $stream
     *     @type int $max_results
     *     @type string $continuation
     *     @type int $timeout
     *     @type string $type
     *           Bucket type, if not set we assume the 'default' type
     *     @type string $term_regex
     *     @type bool $pagination_sort
     *           Whether to use pagination sort for non-paginated queries
     *     @type string $cover_context
     *           parallel extraction extension
     *     @type bool $return_body
     *           Return values with keys, only works with $bucket/$key index queries
     * }
     */
    public function __construct($data = NULL) {
        \Basho\Riak\Api\Pb\Message\RiakKv::initOnce();
        parent::__construct($data);
    }

    /**
     * Generated from protobuf field <code>bytes bucket = 1;</code>
     * @return string
     */
    public function getBucket()
    {
        return $this->bucket;
    }

    /**
     * Generated from protobuf field <code>bytes bucket = 1;</code>
     * @param string $var
     * @return $this
     */
    public function setBucket($var)
    {
        GPBUtil::checkString($var, False);
        $this->bucket = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>bytes index = 2;</code>
     * @return string
     */
    public function getIndex()
    {
        return $this->index;
    }

    /**
     * Generated from protobuf field <code>bytes index = 2;</code>
     * @param string $var
     * @return $this
     */
    public function setIndex($var)
    {
        GPBUtil::checkString($var, False);
        $this->index = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>.RpbIndexReq.IndexQueryType qtype = 3;</code>
     * @return int
     */
    public function getQtype()
    {
        return $this->qtype;
    }

    /**
     * Generated from protobuf field <code>.RpbIndexReq.IndexQueryType qtype = 3;</code>
     * @param int $var
     * @return $this
     */
    public function setQtype($var)
    {
        GPBUtil::checkEnum($var, \Basho\Riak\Api\Pb\Message\RpbIndexReq\IndexQueryType::class);
        $this->qtype = $var;

        return $this;
    }

    /**
     * key here means equals value for index?
     *
     * Generated from protobuf field <code>bytes key = 4;</code>
     * @return string
     */
    public function getKey()
    {
        return isset($this->key) ? $this->key : '';
    }

    public function hasKey()
    {
        return isset($this->key);
    }

    public function clearKey()
    {
        unset($this->key);
    }

    /**
     * key here means equals value for index?
     *
     * Generated from protobuf field <code>bytes key = 4;</code>
     * @param string $var
     * @return $this
     */
    public function setKey($var)
    {
        GPBUtil::checkString($var, False);
        $this->key = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>bytes range_min = 5;</code>
     * @return string
     */
    public function getRangeMin()
    {
        return isset($this->range_min) ? $this->range_min : '';
    }

    public function hasRangeMin()
    {
        return isset($this->range_min);
    }

    public function clearRangeMin()
    {
        unset($this->range_min);
    }

    /**
     * Generated from protobuf field <code>bytes range_min = 5;</code>
     * @param string $var
     * @return $this
     */
    public function setRangeMin($var)
    {
        GPBUtil::checkString($var, False);
        $this->range_min = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>bytes range_max = 6;</code>
     * @return string
     */
    public function getRangeMax()
    {
        return isset($this->range_max) ? $this->range_max : '';
    }

    public function hasRangeMax()
    {
        return isset($this->range_max);
    }

    public function clearRangeMax()
    {
        unset($this->range_max);
    }

    /**
     * Generated from protobuf field <code>bytes range_max = 6;</code>
     * @param string $var
     * @return $this
     */
    public function setRangeMax($var)
    {
        GPBUtil::checkString($var, False);
        $this->range_max = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>bool return_terms = 7;</code>
     * @return bool
     */
    public function getReturnTerms()
    {
        return isset($this->return_terms) ? $this->return_terms : false;
    }

    public function hasReturnTerms()
    {
        return isset($this->return_terms);
    }

    public function clearReturnTerms()
    {
        unset($this->return_terms);
    }

    /**
     * Generated from protobuf field <code>bool return_terms = 7;</code>
     * @param bool $var
     * @return $this
     */
    public function setReturnTerms($var)
    {
        GPBUtil::checkBool($var);
        $this->return_terms = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>bool stream = 8;</code>
     * @return bool
     */
    public function getStream()
    {
        return isset($this->stream) ? $this->stream : false;
    }

    public function hasStream()
    {
        return isset($this->stream);
    }

    public function clearStream()
    {
        unset($this->stream);
    }

    /**
     * Generated from protobuf field <code>bool stream = 8;</code>
     * @param bool $var
     * @return $this
     */
    public function setStream($var)
    {
        GPBUtil::checkBool($var);
        $this->stream = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>uint32 max_results = 9;</code>
     * @return int
     */
    public function getMaxResults()
    {
        return isset($this->max_results) ? $this->max_results : 0;
    }

    public function hasMaxResults()
    {
        return isset($this->max_results);
    }

    public function clearMaxResults()
    {
        unset($this->max_results);
    }

    /**
     * Generated from protobuf field <code>uint32 max_results = 9;</code>
     * @param int $var
     * @return $this
     */
    public function setMaxResults($var)
    {
        GPBUtil::checkUint32($var);
        $this->max_results = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>bytes continuation = 10;</code>
     * @return string
     */
    public function getContinuation()
    {
        return isset($this->continuation) ? $this->continuation : '';
    }

    public function hasContinuation()
    {
        return isset($this->continuation);
    }

    public function clearContinuation()
    {
        unset($this->continuation);
    }

    /**
     * Generated from protobuf field <code>bytes continuation = 10;</code>
     * @param string $var
     * @return $this
     */
    public function setContinuation($var)
    {
        GPBUtil::checkString($var, False);
        $this->continuation = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>uint32 timeout = 11;</code>
     * @return int
     */
    public function getTimeout()
    {
        return isset($this->timeout) ? $this->timeout : 0;
    }

    public function hasTimeout()
    {
        return isset($this->timeout);
    }

    public function clearTimeout()
    {
        unset($this->timeout);
    }

    /**
     * Generated from protobuf field <code>uint32 timeout = 11;</code>
     * @param int $var
     * @return $this
     */
    public function setTimeout($var)
    {
        GPBUtil::checkUint32($var);
        $this->timeout = $var;

        return $this;
    }

    /**
     * Bucket type, if not set we assume the 'default' type
     *
     * Generated from protobuf field <code>bytes type = 12;</code>
     * @return string
     */
    public function getType()
    {
        return isset($this->type) ? $this->type : '';
    }

    public function hasType()
    {
        return isset($this->type);
    }

    public function clearType()
    {
        unset($this->type);
    }

    /**
     * Bucket type, if not set we assume the 'default' type
     *
     * Generated from protobuf field <code>bytes type = 12;</code>
     * @param string $var
     * @return $this
     */
    public function setType($var)
    {
        GPBUtil::checkString($var, False);
        $this->type = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>bytes term_regex = 13;</code>
     * @return string
     */
    public function getTermRegex()
    {
        return isset($this->term_regex) ? $this->term_regex : '';
    }

    public function hasTermRegex()
    {
        return isset($this->term_regex);
    }

    public function clearTermRegex()
    {
        unset($this->term_regex);
    }

    /**
     * Generated from protobuf field <code>bytes term_regex = 13;</code>
     * @param string $var
     * @return $this
     */
    public function setTermRegex($var)
    {
        GPBUtil::checkString($var, False);
        $this->term_regex = $var;

        return $this;
    }

    /**
     * Whether to use pagination sort for non-paginated queries
     *
     * Generated from protobuf field <code>bool pagination_sort = 14;</code>
     * @return bool
     */
    public function getPaginationSort()
    {
        return isset($this->pagination_sort) ? $this->pagination_sort : false;
    }

    public function hasPaginationSort()
    {
        return isset($this->pagination_sort);
    }

    public function clearPaginationSort()
    {
        unset($this->pagination_sort);
    }

    /**
     * Whether to use pagination sort for non-paginated queries
     *
     * Generated from protobuf field <code>bool pagination_sort = 14;</code>
     * @param bool $var
     * @return $this
     */
    public function setPaginationSort($var)
    {
        GPBUtil::checkBool($var);
        $this->pagination_sort = $var;

        return $this;
    }

    /**
     * parallel extraction extension
     *
     * Generated from protobuf field <code>bytes cover_context = 15;</code>
     * @return string
     */
    public function getCoverContext()
    {
        return isset($this->cover_context) ? $this->cover_context : '';
    }

    public function hasCoverContext()
    {
        return isset($this->cover_context);
    }

    public function clearCoverContext()
    {
        unset($this->cover_context);
    }

    /**
     * parallel extraction extension
     *
     * Generated from protobuf field <code>bytes cover_context = 15;</code>
     * @param string $var
     * @return $this
     */
    public function setCoverContext($var)
    {
        GPBUtil::checkString($var, False);
        $this->cover_context = $var;

        return $this;
    }

    /**
     * Return values with keys, only works with $bucket/$key index queries
     *
     * Generated from protobuf field <code>bool return_body = 16;</code>
     * @return bool
     */
    public function getReturnBody()
    {
        return isset($this->return_body) ? $this->return_body : false;
    }

    public function hasReturnBody()
    {
        return isset($this->return_body);
    }

    public function clearReturnBody()
    {
        unset($this->return_body);
    }

    /**
     * Return values with keys, only works with $bucket/$key index queries
     *
     * Generated from protobuf field <code>bool return_body = 16;</code>
     * @param bool $var
     * @return $this
     */
    public function setReturnBody($var)
    {
        GPBUtil::checkBool($var);
        $this->return_body = $var;

        return $this;
    }

}

