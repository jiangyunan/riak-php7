<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: riak_kv.proto

namespace Basho\Riak\Api\Pb\Message;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Get Request - retrieve bucket/key
 *
 * Generated from protobuf message <code>RpbGetReq</code>
 */
class RpbGetReq extends \Google\Protobuf\Internal\Message
{
    /**
     * Generated from protobuf field <code>bytes bucket = 1;</code>
     */
    protected $bucket = '';
    /**
     * Generated from protobuf field <code>bytes key = 2;</code>
     */
    protected $key = '';
    /**
     * Generated from protobuf field <code>uint32 r = 3;</code>
     */
    protected $r = null;
    /**
     * Generated from protobuf field <code>uint32 pr = 4;</code>
     */
    protected $pr = null;
    /**
     * Generated from protobuf field <code>bool basic_quorum = 5;</code>
     */
    protected $basic_quorum = null;
    /**
     * Generated from protobuf field <code>bool notfound_ok = 6;</code>
     */
    protected $notfound_ok = null;
    /**
     * fail if the supplied vclock does not match
     *
     * Generated from protobuf field <code>bytes if_modified = 7;</code>
     */
    protected $if_modified = null;
    /**
     * return everything but the value
     *
     * Generated from protobuf field <code>bool head = 8;</code>
     */
    protected $head = null;
    /**
     * return the tombstone's vclock, if applicable
     *
     * Generated from protobuf field <code>bool deletedvclock = 9;</code>
     */
    protected $deletedvclock = null;
    /**
     * Generated from protobuf field <code>uint32 timeout = 10;</code>
     */
    protected $timeout = null;
    /**
     * Experimental, may change/disappear
     *
     * Generated from protobuf field <code>bool sloppy_quorum = 11;</code>
     */
    protected $sloppy_quorum = null;
    /**
     * Experimental, may change/disappear
     *
     * Generated from protobuf field <code>uint32 n_val = 12;</code>
     */
    protected $n_val = null;
    /**
     * Bucket type, if not set we assume the 'default' type
     *
     * Generated from protobuf field <code>bytes type = 13;</code>
     */
    protected $type = null;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $bucket
     *     @type string $key
     *     @type int $r
     *     @type int $pr
     *     @type bool $basic_quorum
     *     @type bool $notfound_ok
     *     @type string $if_modified
     *           fail if the supplied vclock does not match
     *     @type bool $head
     *           return everything but the value
     *     @type bool $deletedvclock
     *           return the tombstone's vclock, if applicable
     *     @type int $timeout
     *     @type bool $sloppy_quorum
     *           Experimental, may change/disappear
     *     @type int $n_val
     *           Experimental, may change/disappear
     *     @type string $type
     *           Bucket type, if not set we assume the 'default' type
     * }
     */
    public function __construct($data = NULL) {
        \Basho\Riak\Api\Pb\Message\RiakKv::initOnce();
        parent::__construct($data);
    }

    /**
     * Generated from protobuf field <code>bytes bucket = 1;</code>
     * @return string
     */
    public function getBucket()
    {
        return $this->bucket;
    }

    /**
     * Generated from protobuf field <code>bytes bucket = 1;</code>
     * @param string $var
     * @return $this
     */
    public function setBucket($var)
    {
        GPBUtil::checkString($var, False);
        $this->bucket = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>bytes key = 2;</code>
     * @return string
     */
    public function getKey()
    {
        return $this->key;
    }

    /**
     * Generated from protobuf field <code>bytes key = 2;</code>
     * @param string $var
     * @return $this
     */
    public function setKey($var)
    {
        GPBUtil::checkString($var, False);
        $this->key = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>uint32 r = 3;</code>
     * @return int
     */
    public function getR()
    {
        return isset($this->r) ? $this->r : 0;
    }

    public function hasR()
    {
        return isset($this->r);
    }

    public function clearR()
    {
        unset($this->r);
    }

    /**
     * Generated from protobuf field <code>uint32 r = 3;</code>
     * @param int $var
     * @return $this
     */
    public function setR($var)
    {
        GPBUtil::checkUint32($var);
        $this->r = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>uint32 pr = 4;</code>
     * @return int
     */
    public function getPr()
    {
        return isset($this->pr) ? $this->pr : 0;
    }

    public function hasPr()
    {
        return isset($this->pr);
    }

    public function clearPr()
    {
        unset($this->pr);
    }

    /**
     * Generated from protobuf field <code>uint32 pr = 4;</code>
     * @param int $var
     * @return $this
     */
    public function setPr($var)
    {
        GPBUtil::checkUint32($var);
        $this->pr = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>bool basic_quorum = 5;</code>
     * @return bool
     */
    public function getBasicQuorum()
    {
        return isset($this->basic_quorum) ? $this->basic_quorum : false;
    }

    public function hasBasicQuorum()
    {
        return isset($this->basic_quorum);
    }

    public function clearBasicQuorum()
    {
        unset($this->basic_quorum);
    }

    /**
     * Generated from protobuf field <code>bool basic_quorum = 5;</code>
     * @param bool $var
     * @return $this
     */
    public function setBasicQuorum($var)
    {
        GPBUtil::checkBool($var);
        $this->basic_quorum = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>bool notfound_ok = 6;</code>
     * @return bool
     */
    public function getNotfoundOk()
    {
        return isset($this->notfound_ok) ? $this->notfound_ok : false;
    }

    public function hasNotfoundOk()
    {
        return isset($this->notfound_ok);
    }

    public function clearNotfoundOk()
    {
        unset($this->notfound_ok);
    }

    /**
     * Generated from protobuf field <code>bool notfound_ok = 6;</code>
     * @param bool $var
     * @return $this
     */
    public function setNotfoundOk($var)
    {
        GPBUtil::checkBool($var);
        $this->notfound_ok = $var;

        return $this;
    }

    /**
     * fail if the supplied vclock does not match
     *
     * Generated from protobuf field <code>bytes if_modified = 7;</code>
     * @return string
     */
    public function getIfModified()
    {
        return isset($this->if_modified) ? $this->if_modified : '';
    }

    public function hasIfModified()
    {
        return isset($this->if_modified);
    }

    public function clearIfModified()
    {
        unset($this->if_modified);
    }

    /**
     * fail if the supplied vclock does not match
     *
     * Generated from protobuf field <code>bytes if_modified = 7;</code>
     * @param string $var
     * @return $this
     */
    public function setIfModified($var)
    {
        GPBUtil::checkString($var, False);
        $this->if_modified = $var;

        return $this;
    }

    /**
     * return everything but the value
     *
     * Generated from protobuf field <code>bool head = 8;</code>
     * @return bool
     */
    public function getHead()
    {
        return isset($this->head) ? $this->head : false;
    }

    public function hasHead()
    {
        return isset($this->head);
    }

    public function clearHead()
    {
        unset($this->head);
    }

    /**
     * return everything but the value
     *
     * Generated from protobuf field <code>bool head = 8;</code>
     * @param bool $var
     * @return $this
     */
    public function setHead($var)
    {
        GPBUtil::checkBool($var);
        $this->head = $var;

        return $this;
    }

    /**
     * return the tombstone's vclock, if applicable
     *
     * Generated from protobuf field <code>bool deletedvclock = 9;</code>
     * @return bool
     */
    public function getDeletedvclock()
    {
        return isset($this->deletedvclock) ? $this->deletedvclock : false;
    }

    public function hasDeletedvclock()
    {
        return isset($this->deletedvclock);
    }

    public function clearDeletedvclock()
    {
        unset($this->deletedvclock);
    }

    /**
     * return the tombstone's vclock, if applicable
     *
     * Generated from protobuf field <code>bool deletedvclock = 9;</code>
     * @param bool $var
     * @return $this
     */
    public function setDeletedvclock($var)
    {
        GPBUtil::checkBool($var);
        $this->deletedvclock = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>uint32 timeout = 10;</code>
     * @return int
     */
    public function getTimeout()
    {
        return isset($this->timeout) ? $this->timeout : 0;
    }

    public function hasTimeout()
    {
        return isset($this->timeout);
    }

    public function clearTimeout()
    {
        unset($this->timeout);
    }

    /**
     * Generated from protobuf field <code>uint32 timeout = 10;</code>
     * @param int $var
     * @return $this
     */
    public function setTimeout($var)
    {
        GPBUtil::checkUint32($var);
        $this->timeout = $var;

        return $this;
    }

    /**
     * Experimental, may change/disappear
     *
     * Generated from protobuf field <code>bool sloppy_quorum = 11;</code>
     * @return bool
     */
    public function getSloppyQuorum()
    {
        return isset($this->sloppy_quorum) ? $this->sloppy_quorum : false;
    }

    public function hasSloppyQuorum()
    {
        return isset($this->sloppy_quorum);
    }

    public function clearSloppyQuorum()
    {
        unset($this->sloppy_quorum);
    }

    /**
     * Experimental, may change/disappear
     *
     * Generated from protobuf field <code>bool sloppy_quorum = 11;</code>
     * @param bool $var
     * @return $this
     */
    public function setSloppyQuorum($var)
    {
        GPBUtil::checkBool($var);
        $this->sloppy_quorum = $var;

        return $this;
    }

    /**
     * Experimental, may change/disappear
     *
     * Generated from protobuf field <code>uint32 n_val = 12;</code>
     * @return int
     */
    public function getNVal()
    {
        return isset($this->n_val) ? $this->n_val : 0;
    }

    public function hasNVal()
    {
        return isset($this->n_val);
    }

    public function clearNVal()
    {
        unset($this->n_val);
    }

    /**
     * Experimental, may change/disappear
     *
     * Generated from protobuf field <code>uint32 n_val = 12;</code>
     * @param int $var
     * @return $this
     */
    public function setNVal($var)
    {
        GPBUtil::checkUint32($var);
        $this->n_val = $var;

        return $this;
    }

    /**
     * Bucket type, if not set we assume the 'default' type
     *
     * Generated from protobuf field <code>bytes type = 13;</code>
     * @return string
     */
    public function getType()
    {
        return isset($this->type) ? $this->type : '';
    }

    public function hasType()
    {
        return isset($this->type);
    }

    public function clearType()
    {
        unset($this->type);
    }

    /**
     * Bucket type, if not set we assume the 'default' type
     *
     * Generated from protobuf field <code>bytes type = 13;</code>
     * @param string $var
     * @return $this
     */
    public function setType($var)
    {
        GPBUtil::checkString($var, False);
        $this->type = $var;

        return $this;
    }

}

