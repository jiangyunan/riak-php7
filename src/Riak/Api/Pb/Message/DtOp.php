<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: riak_dt.proto

namespace Basho\Riak\Api\Pb\Message;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * A "union" type for update operations. The included operation
 * depends on the datatype being updated.
 *
 * Generated from protobuf message <code>DtOp</code>
 */
class DtOp extends \Google\Protobuf\Internal\Message
{
    /**
     * Generated from protobuf field <code>.CounterOp counter_op = 1;</code>
     */
    protected $counter_op = null;
    /**
     * Generated from protobuf field <code>.SetOp set_op = 2;</code>
     */
    protected $set_op = null;
    /**
     * Generated from protobuf field <code>.MapOp map_op = 3;</code>
     */
    protected $map_op = null;
    /**
     * Adding values to a hyperloglog (set) is just like adding values
     * to a set.
     *
     * Generated from protobuf field <code>.HllOp hll_op = 4;</code>
     */
    protected $hll_op = null;
    /**
     * Generated from protobuf field <code>.GSetOp gset_op = 5;</code>
     */
    protected $gset_op = null;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type \Basho\Riak\Api\Pb\Message\CounterOp $counter_op
     *     @type \Basho\Riak\Api\Pb\Message\SetOp $set_op
     *     @type \Basho\Riak\Api\Pb\Message\MapOp $map_op
     *     @type \Basho\Riak\Api\Pb\Message\HllOp $hll_op
     *           Adding values to a hyperloglog (set) is just like adding values
     *           to a set.
     *     @type \Basho\Riak\Api\Pb\Message\GSetOp $gset_op
     * }
     */
    public function __construct($data = NULL) {
        \Basho\Riak\Api\Pb\Message\RiakDt::initOnce();
        parent::__construct($data);
    }

    /**
     * Generated from protobuf field <code>.CounterOp counter_op = 1;</code>
     * @return \Basho\Riak\Api\Pb\Message\CounterOp
     */
    public function getCounterOp()
    {
        return isset($this->counter_op) ? $this->counter_op : null;
    }

    public function hasCounterOp()
    {
        return isset($this->counter_op);
    }

    public function clearCounterOp()
    {
        unset($this->counter_op);
    }

    /**
     * Generated from protobuf field <code>.CounterOp counter_op = 1;</code>
     * @param \Basho\Riak\Api\Pb\Message\CounterOp $var
     * @return $this
     */
    public function setCounterOp($var)
    {
        GPBUtil::checkMessage($var, \Basho\Riak\Api\Pb\Message\CounterOp::class);
        $this->counter_op = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>.SetOp set_op = 2;</code>
     * @return \Basho\Riak\Api\Pb\Message\SetOp
     */
    public function getSetOp()
    {
        return isset($this->set_op) ? $this->set_op : null;
    }

    public function hasSetOp()
    {
        return isset($this->set_op);
    }

    public function clearSetOp()
    {
        unset($this->set_op);
    }

    /**
     * Generated from protobuf field <code>.SetOp set_op = 2;</code>
     * @param \Basho\Riak\Api\Pb\Message\SetOp $var
     * @return $this
     */
    public function setSetOp($var)
    {
        GPBUtil::checkMessage($var, \Basho\Riak\Api\Pb\Message\SetOp::class);
        $this->set_op = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>.MapOp map_op = 3;</code>
     * @return \Basho\Riak\Api\Pb\Message\MapOp
     */
    public function getMapOp()
    {
        return isset($this->map_op) ? $this->map_op : null;
    }

    public function hasMapOp()
    {
        return isset($this->map_op);
    }

    public function clearMapOp()
    {
        unset($this->map_op);
    }

    /**
     * Generated from protobuf field <code>.MapOp map_op = 3;</code>
     * @param \Basho\Riak\Api\Pb\Message\MapOp $var
     * @return $this
     */
    public function setMapOp($var)
    {
        GPBUtil::checkMessage($var, \Basho\Riak\Api\Pb\Message\MapOp::class);
        $this->map_op = $var;

        return $this;
    }

    /**
     * Adding values to a hyperloglog (set) is just like adding values
     * to a set.
     *
     * Generated from protobuf field <code>.HllOp hll_op = 4;</code>
     * @return \Basho\Riak\Api\Pb\Message\HllOp
     */
    public function getHllOp()
    {
        return isset($this->hll_op) ? $this->hll_op : null;
    }

    public function hasHllOp()
    {
        return isset($this->hll_op);
    }

    public function clearHllOp()
    {
        unset($this->hll_op);
    }

    /**
     * Adding values to a hyperloglog (set) is just like adding values
     * to a set.
     *
     * Generated from protobuf field <code>.HllOp hll_op = 4;</code>
     * @param \Basho\Riak\Api\Pb\Message\HllOp $var
     * @return $this
     */
    public function setHllOp($var)
    {
        GPBUtil::checkMessage($var, \Basho\Riak\Api\Pb\Message\HllOp::class);
        $this->hll_op = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>.GSetOp gset_op = 5;</code>
     * @return \Basho\Riak\Api\Pb\Message\GSetOp
     */
    public function getGsetOp()
    {
        return isset($this->gset_op) ? $this->gset_op : null;
    }

    public function hasGsetOp()
    {
        return isset($this->gset_op);
    }

    public function clearGsetOp()
    {
        unset($this->gset_op);
    }

    /**
     * Generated from protobuf field <code>.GSetOp gset_op = 5;</code>
     * @param \Basho\Riak\Api\Pb\Message\GSetOp $var
     * @return $this
     */
    public function setGsetOp($var)
    {
        GPBUtil::checkMessage($var, \Basho\Riak\Api\Pb\Message\GSetOp::class);
        $this->gset_op = $var;

        return $this;
    }

}

