<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: riak_kv.proto

namespace Basho\Riak\Api\Pb\Message;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * added solely for riak_cs currently
 * for folding over a bucket and returning
 * objects.
 *
 * Generated from protobuf message <code>RpbCSBucketReq</code>
 */
class RpbCSBucketReq extends \Google\Protobuf\Internal\Message
{
    /**
     * Generated from protobuf field <code>bytes bucket = 1;</code>
     */
    protected $bucket = '';
    /**
     * Generated from protobuf field <code>bytes start_key = 2;</code>
     */
    protected $start_key = '';
    /**
     * Generated from protobuf field <code>bytes end_key = 3;</code>
     */
    protected $end_key = null;
    /**
     * Generated from protobuf field <code>bool start_incl = 4;</code>
     */
    protected $start_incl = null;
    /**
     * Generated from protobuf field <code>bool end_incl = 5;</code>
     */
    protected $end_incl = null;
    /**
     * Generated from protobuf field <code>bytes continuation = 6;</code>
     */
    protected $continuation = null;
    /**
     * Generated from protobuf field <code>uint32 max_results = 7;</code>
     */
    protected $max_results = null;
    /**
     * Generated from protobuf field <code>uint32 timeout = 8;</code>
     */
    protected $timeout = null;
    /**
     * Bucket type, if not set we assume the 'default' type
     *
     * Generated from protobuf field <code>bytes type = 9;</code>
     */
    protected $type = null;
    /**
     * parallel extraction extension
     *
     * Generated from protobuf field <code>bytes cover_context = 10;</code>
     */
    protected $cover_context = null;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $bucket
     *     @type string $start_key
     *     @type string $end_key
     *     @type bool $start_incl
     *     @type bool $end_incl
     *     @type string $continuation
     *     @type int $max_results
     *     @type int $timeout
     *     @type string $type
     *           Bucket type, if not set we assume the 'default' type
     *     @type string $cover_context
     *           parallel extraction extension
     * }
     */
    public function __construct($data = NULL) {
        \Basho\Riak\Api\Pb\Message\RiakKv::initOnce();
        parent::__construct($data);
    }

    /**
     * Generated from protobuf field <code>bytes bucket = 1;</code>
     * @return string
     */
    public function getBucket()
    {
        return $this->bucket;
    }

    /**
     * Generated from protobuf field <code>bytes bucket = 1;</code>
     * @param string $var
     * @return $this
     */
    public function setBucket($var)
    {
        GPBUtil::checkString($var, False);
        $this->bucket = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>bytes start_key = 2;</code>
     * @return string
     */
    public function getStartKey()
    {
        return $this->start_key;
    }

    /**
     * Generated from protobuf field <code>bytes start_key = 2;</code>
     * @param string $var
     * @return $this
     */
    public function setStartKey($var)
    {
        GPBUtil::checkString($var, False);
        $this->start_key = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>bytes end_key = 3;</code>
     * @return string
     */
    public function getEndKey()
    {
        return isset($this->end_key) ? $this->end_key : '';
    }

    public function hasEndKey()
    {
        return isset($this->end_key);
    }

    public function clearEndKey()
    {
        unset($this->end_key);
    }

    /**
     * Generated from protobuf field <code>bytes end_key = 3;</code>
     * @param string $var
     * @return $this
     */
    public function setEndKey($var)
    {
        GPBUtil::checkString($var, False);
        $this->end_key = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>bool start_incl = 4;</code>
     * @return bool
     */
    public function getStartIncl()
    {
        return isset($this->start_incl) ? $this->start_incl : false;
    }

    public function hasStartIncl()
    {
        return isset($this->start_incl);
    }

    public function clearStartIncl()
    {
        unset($this->start_incl);
    }

    /**
     * Generated from protobuf field <code>bool start_incl = 4;</code>
     * @param bool $var
     * @return $this
     */
    public function setStartIncl($var)
    {
        GPBUtil::checkBool($var);
        $this->start_incl = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>bool end_incl = 5;</code>
     * @return bool
     */
    public function getEndIncl()
    {
        return isset($this->end_incl) ? $this->end_incl : false;
    }

    public function hasEndIncl()
    {
        return isset($this->end_incl);
    }

    public function clearEndIncl()
    {
        unset($this->end_incl);
    }

    /**
     * Generated from protobuf field <code>bool end_incl = 5;</code>
     * @param bool $var
     * @return $this
     */
    public function setEndIncl($var)
    {
        GPBUtil::checkBool($var);
        $this->end_incl = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>bytes continuation = 6;</code>
     * @return string
     */
    public function getContinuation()
    {
        return isset($this->continuation) ? $this->continuation : '';
    }

    public function hasContinuation()
    {
        return isset($this->continuation);
    }

    public function clearContinuation()
    {
        unset($this->continuation);
    }

    /**
     * Generated from protobuf field <code>bytes continuation = 6;</code>
     * @param string $var
     * @return $this
     */
    public function setContinuation($var)
    {
        GPBUtil::checkString($var, False);
        $this->continuation = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>uint32 max_results = 7;</code>
     * @return int
     */
    public function getMaxResults()
    {
        return isset($this->max_results) ? $this->max_results : 0;
    }

    public function hasMaxResults()
    {
        return isset($this->max_results);
    }

    public function clearMaxResults()
    {
        unset($this->max_results);
    }

    /**
     * Generated from protobuf field <code>uint32 max_results = 7;</code>
     * @param int $var
     * @return $this
     */
    public function setMaxResults($var)
    {
        GPBUtil::checkUint32($var);
        $this->max_results = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>uint32 timeout = 8;</code>
     * @return int
     */
    public function getTimeout()
    {
        return isset($this->timeout) ? $this->timeout : 0;
    }

    public function hasTimeout()
    {
        return isset($this->timeout);
    }

    public function clearTimeout()
    {
        unset($this->timeout);
    }

    /**
     * Generated from protobuf field <code>uint32 timeout = 8;</code>
     * @param int $var
     * @return $this
     */
    public function setTimeout($var)
    {
        GPBUtil::checkUint32($var);
        $this->timeout = $var;

        return $this;
    }

    /**
     * Bucket type, if not set we assume the 'default' type
     *
     * Generated from protobuf field <code>bytes type = 9;</code>
     * @return string
     */
    public function getType()
    {
        return isset($this->type) ? $this->type : '';
    }

    public function hasType()
    {
        return isset($this->type);
    }

    public function clearType()
    {
        unset($this->type);
    }

    /**
     * Bucket type, if not set we assume the 'default' type
     *
     * Generated from protobuf field <code>bytes type = 9;</code>
     * @param string $var
     * @return $this
     */
    public function setType($var)
    {
        GPBUtil::checkString($var, False);
        $this->type = $var;

        return $this;
    }

    /**
     * parallel extraction extension
     *
     * Generated from protobuf field <code>bytes cover_context = 10;</code>
     * @return string
     */
    public function getCoverContext()
    {
        return isset($this->cover_context) ? $this->cover_context : '';
    }

    public function hasCoverContext()
    {
        return isset($this->cover_context);
    }

    public function clearCoverContext()
    {
        unset($this->cover_context);
    }

    /**
     * parallel extraction extension
     *
     * Generated from protobuf field <code>bytes cover_context = 10;</code>
     * @param string $var
     * @return $this
     */
    public function setCoverContext($var)
    {
        GPBUtil::checkString($var, False);
        $this->cover_context = $var;

        return $this;
    }

}

