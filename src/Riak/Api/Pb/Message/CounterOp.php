<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: riak_dt.proto

namespace Basho\Riak\Api\Pb\Message;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * An operation to update a Counter, either on its own or inside a
 * Map. The `increment` field can be positive or negative. When absent,
 * the meaning is an increment by 1.
 *
 * Generated from protobuf message <code>CounterOp</code>
 */
class CounterOp extends \Google\Protobuf\Internal\Message
{
    /**
     * Generated from protobuf field <code>sint64 increment = 1;</code>
     */
    protected $increment = null;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type int|string $increment
     * }
     */
    public function __construct($data = NULL) {
        \Basho\Riak\Api\Pb\Message\RiakDt::initOnce();
        parent::__construct($data);
    }

    /**
     * Generated from protobuf field <code>sint64 increment = 1;</code>
     * @return int|string
     */
    public function getIncrement()
    {
        return isset($this->increment) ? $this->increment : 0;
    }

    public function hasIncrement()
    {
        return isset($this->increment);
    }

    public function clearIncrement()
    {
        unset($this->increment);
    }

    /**
     * Generated from protobuf field <code>sint64 increment = 1;</code>
     * @param int|string $var
     * @return $this
     */
    public function setIncrement($var)
    {
        GPBUtil::checkInt64($var);
        $this->increment = $var;

        return $this;
    }

}

