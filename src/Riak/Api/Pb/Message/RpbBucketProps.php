<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: riak.proto

namespace Basho\Riak\Api\Pb\Message;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Bucket properties
 *
 * Generated from protobuf message <code>RpbBucketProps</code>
 */
class RpbBucketProps extends \Google\Protobuf\Internal\Message
{
    /**
     * Declared in riak_core_app
     *
     * Generated from protobuf field <code>uint32 n_val = 1;</code>
     */
    protected $n_val = null;
    /**
     * Generated from protobuf field <code>bool allow_mult = 2;</code>
     */
    protected $allow_mult = null;
    /**
     * Generated from protobuf field <code>bool last_write_wins = 3;</code>
     */
    protected $last_write_wins = null;
    /**
     * Generated from protobuf field <code>repeated .RpbCommitHook precommit = 4;</code>
     */
    private $precommit;
    /**
     * Generated from protobuf field <code>bool has_precommit = 5;</code>
     */
    protected $has_precommit = null;
    /**
     * Generated from protobuf field <code>repeated .RpbCommitHook postcommit = 6;</code>
     */
    private $postcommit;
    /**
     * Generated from protobuf field <code>bool has_postcommit = 7;</code>
     */
    protected $has_postcommit = null;
    /**
     * Generated from protobuf field <code>.RpbModFun chash_keyfun = 8;</code>
     */
    protected $chash_keyfun = null;
    /**
     * Declared in riak_kv_app
     *
     * Generated from protobuf field <code>.RpbModFun linkfun = 9;</code>
     */
    protected $linkfun = null;
    /**
     * Generated from protobuf field <code>uint32 old_vclock = 10;</code>
     */
    protected $old_vclock = null;
    /**
     * Generated from protobuf field <code>uint32 young_vclock = 11;</code>
     */
    protected $young_vclock = null;
    /**
     * Generated from protobuf field <code>uint32 big_vclock = 12;</code>
     */
    protected $big_vclock = null;
    /**
     * Generated from protobuf field <code>uint32 small_vclock = 13;</code>
     */
    protected $small_vclock = null;
    /**
     * Generated from protobuf field <code>uint32 pr = 14;</code>
     */
    protected $pr = null;
    /**
     * Generated from protobuf field <code>uint32 r = 15;</code>
     */
    protected $r = null;
    /**
     * Generated from protobuf field <code>uint32 w = 16;</code>
     */
    protected $w = null;
    /**
     * Generated from protobuf field <code>uint32 pw = 17;</code>
     */
    protected $pw = null;
    /**
     * Generated from protobuf field <code>uint32 dw = 18;</code>
     */
    protected $dw = null;
    /**
     * Generated from protobuf field <code>uint32 rw = 19;</code>
     */
    protected $rw = null;
    /**
     * Generated from protobuf field <code>bool basic_quorum = 20;</code>
     */
    protected $basic_quorum = null;
    /**
     * Generated from protobuf field <code>bool notfound_ok = 21;</code>
     */
    protected $notfound_ok = null;
    /**
     * Used by riak_kv_multi_backend
     *
     * Generated from protobuf field <code>bytes backend = 22;</code>
     */
    protected $backend = null;
    /**
     * Used by riak_search bucket fixup
     *
     * Generated from protobuf field <code>bool search = 23;</code>
     */
    protected $search = null;
    /**
     * Generated from protobuf field <code>.RpbBucketProps.RpbReplMode repl = 24;</code>
     */
    protected $repl = null;
    /**
     * Search index
     *
     * Generated from protobuf field <code>bytes search_index = 25;</code>
     */
    protected $search_index = null;
    /**
     * KV Datatypes
     *
     * Generated from protobuf field <code>bytes datatype = 26;</code>
     */
    protected $datatype = null;
    /**
     * KV strong consistency
     *
     * Generated from protobuf field <code>bool consistent = 27;</code>
     */
    protected $consistent = null;
    /**
     * KV fast path
     *
     * Generated from protobuf field <code>bool write_once = 28;</code>
     */
    protected $write_once = null;
    /**
     * Hyperlolog DT Precision
     *
     * Generated from protobuf field <code>uint32 hll_precision = 29;</code>
     */
    protected $hll_precision = null;
    /**
     * KV sweeper object expiry time
     *
     * Generated from protobuf field <code>uint32 ttl = 30;</code>
     */
    protected $ttl = null;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type int $n_val
     *           Declared in riak_core_app
     *     @type bool $allow_mult
     *     @type bool $last_write_wins
     *     @type \Basho\Riak\Api\Pb\Message\RpbCommitHook[]|\Google\Protobuf\Internal\RepeatedField $precommit
     *     @type bool $has_precommit
     *     @type \Basho\Riak\Api\Pb\Message\RpbCommitHook[]|\Google\Protobuf\Internal\RepeatedField $postcommit
     *     @type bool $has_postcommit
     *     @type \Basho\Riak\Api\Pb\Message\RpbModFun $chash_keyfun
     *     @type \Basho\Riak\Api\Pb\Message\RpbModFun $linkfun
     *           Declared in riak_kv_app
     *     @type int $old_vclock
     *     @type int $young_vclock
     *     @type int $big_vclock
     *     @type int $small_vclock
     *     @type int $pr
     *     @type int $r
     *     @type int $w
     *     @type int $pw
     *     @type int $dw
     *     @type int $rw
     *     @type bool $basic_quorum
     *     @type bool $notfound_ok
     *     @type string $backend
     *           Used by riak_kv_multi_backend
     *     @type bool $search
     *           Used by riak_search bucket fixup
     *     @type int $repl
     *     @type string $search_index
     *           Search index
     *     @type string $datatype
     *           KV Datatypes
     *     @type bool $consistent
     *           KV strong consistency
     *     @type bool $write_once
     *           KV fast path
     *     @type int $hll_precision
     *           Hyperlolog DT Precision
     *     @type int $ttl
     *           KV sweeper object expiry time
     * }
     */
    public function __construct($data = NULL) {
        \Basho\Riak\Api\Pb\Message\Riak::initOnce();
        parent::__construct($data);
    }

    /**
     * Declared in riak_core_app
     *
     * Generated from protobuf field <code>uint32 n_val = 1;</code>
     * @return int
     */
    public function getNVal()
    {
        return isset($this->n_val) ? $this->n_val : 0;
    }

    public function hasNVal()
    {
        return isset($this->n_val);
    }

    public function clearNVal()
    {
        unset($this->n_val);
    }

    /**
     * Declared in riak_core_app
     *
     * Generated from protobuf field <code>uint32 n_val = 1;</code>
     * @param int $var
     * @return $this
     */
    public function setNVal($var)
    {
        GPBUtil::checkUint32($var);
        $this->n_val = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>bool allow_mult = 2;</code>
     * @return bool
     */
    public function getAllowMult()
    {
        return isset($this->allow_mult) ? $this->allow_mult : false;
    }

    public function hasAllowMult()
    {
        return isset($this->allow_mult);
    }

    public function clearAllowMult()
    {
        unset($this->allow_mult);
    }

    /**
     * Generated from protobuf field <code>bool allow_mult = 2;</code>
     * @param bool $var
     * @return $this
     */
    public function setAllowMult($var)
    {
        GPBUtil::checkBool($var);
        $this->allow_mult = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>bool last_write_wins = 3;</code>
     * @return bool
     */
    public function getLastWriteWins()
    {
        return isset($this->last_write_wins) ? $this->last_write_wins : false;
    }

    public function hasLastWriteWins()
    {
        return isset($this->last_write_wins);
    }

    public function clearLastWriteWins()
    {
        unset($this->last_write_wins);
    }

    /**
     * Generated from protobuf field <code>bool last_write_wins = 3;</code>
     * @param bool $var
     * @return $this
     */
    public function setLastWriteWins($var)
    {
        GPBUtil::checkBool($var);
        $this->last_write_wins = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>repeated .RpbCommitHook precommit = 4;</code>
     * @return \Google\Protobuf\Internal\RepeatedField
     */
    public function getPrecommit()
    {
        return $this->precommit;
    }

    /**
     * Generated from protobuf field <code>repeated .RpbCommitHook precommit = 4;</code>
     * @param \Basho\Riak\Api\Pb\Message\RpbCommitHook[]|\Google\Protobuf\Internal\RepeatedField $var
     * @return $this
     */
    public function setPrecommit($var)
    {
        $arr = GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::MESSAGE, \Basho\Riak\Api\Pb\Message\RpbCommitHook::class);
        $this->precommit = $arr;

        return $this;
    }

    /**
     * Generated from protobuf field <code>bool has_precommit = 5;</code>
     * @return bool
     */
    public function getHasPrecommit()
    {
        return isset($this->has_precommit) ? $this->has_precommit : false;
    }

    public function hasHasPrecommit()
    {
        return isset($this->has_precommit);
    }

    public function clearHasPrecommit()
    {
        unset($this->has_precommit);
    }

    /**
     * Generated from protobuf field <code>bool has_precommit = 5;</code>
     * @param bool $var
     * @return $this
     */
    public function setHasPrecommit($var)
    {
        GPBUtil::checkBool($var);
        $this->has_precommit = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>repeated .RpbCommitHook postcommit = 6;</code>
     * @return \Google\Protobuf\Internal\RepeatedField
     */
    public function getPostcommit()
    {
        return $this->postcommit;
    }

    /**
     * Generated from protobuf field <code>repeated .RpbCommitHook postcommit = 6;</code>
     * @param \Basho\Riak\Api\Pb\Message\RpbCommitHook[]|\Google\Protobuf\Internal\RepeatedField $var
     * @return $this
     */
    public function setPostcommit($var)
    {
        $arr = GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::MESSAGE, \Basho\Riak\Api\Pb\Message\RpbCommitHook::class);
        $this->postcommit = $arr;

        return $this;
    }

    /**
     * Generated from protobuf field <code>bool has_postcommit = 7;</code>
     * @return bool
     */
    public function getHasPostcommit()
    {
        return isset($this->has_postcommit) ? $this->has_postcommit : false;
    }

    public function hasHasPostcommit()
    {
        return isset($this->has_postcommit);
    }

    public function clearHasPostcommit()
    {
        unset($this->has_postcommit);
    }

    /**
     * Generated from protobuf field <code>bool has_postcommit = 7;</code>
     * @param bool $var
     * @return $this
     */
    public function setHasPostcommit($var)
    {
        GPBUtil::checkBool($var);
        $this->has_postcommit = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>.RpbModFun chash_keyfun = 8;</code>
     * @return \Basho\Riak\Api\Pb\Message\RpbModFun
     */
    public function getChashKeyfun()
    {
        return isset($this->chash_keyfun) ? $this->chash_keyfun : null;
    }

    public function hasChashKeyfun()
    {
        return isset($this->chash_keyfun);
    }

    public function clearChashKeyfun()
    {
        unset($this->chash_keyfun);
    }

    /**
     * Generated from protobuf field <code>.RpbModFun chash_keyfun = 8;</code>
     * @param \Basho\Riak\Api\Pb\Message\RpbModFun $var
     * @return $this
     */
    public function setChashKeyfun($var)
    {
        GPBUtil::checkMessage($var, \Basho\Riak\Api\Pb\Message\RpbModFun::class);
        $this->chash_keyfun = $var;

        return $this;
    }

    /**
     * Declared in riak_kv_app
     *
     * Generated from protobuf field <code>.RpbModFun linkfun = 9;</code>
     * @return \Basho\Riak\Api\Pb\Message\RpbModFun
     */
    public function getLinkfun()
    {
        return isset($this->linkfun) ? $this->linkfun : null;
    }

    public function hasLinkfun()
    {
        return isset($this->linkfun);
    }

    public function clearLinkfun()
    {
        unset($this->linkfun);
    }

    /**
     * Declared in riak_kv_app
     *
     * Generated from protobuf field <code>.RpbModFun linkfun = 9;</code>
     * @param \Basho\Riak\Api\Pb\Message\RpbModFun $var
     * @return $this
     */
    public function setLinkfun($var)
    {
        GPBUtil::checkMessage($var, \Basho\Riak\Api\Pb\Message\RpbModFun::class);
        $this->linkfun = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>uint32 old_vclock = 10;</code>
     * @return int
     */
    public function getOldVclock()
    {
        return isset($this->old_vclock) ? $this->old_vclock : 0;
    }

    public function hasOldVclock()
    {
        return isset($this->old_vclock);
    }

    public function clearOldVclock()
    {
        unset($this->old_vclock);
    }

    /**
     * Generated from protobuf field <code>uint32 old_vclock = 10;</code>
     * @param int $var
     * @return $this
     */
    public function setOldVclock($var)
    {
        GPBUtil::checkUint32($var);
        $this->old_vclock = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>uint32 young_vclock = 11;</code>
     * @return int
     */
    public function getYoungVclock()
    {
        return isset($this->young_vclock) ? $this->young_vclock : 0;
    }

    public function hasYoungVclock()
    {
        return isset($this->young_vclock);
    }

    public function clearYoungVclock()
    {
        unset($this->young_vclock);
    }

    /**
     * Generated from protobuf field <code>uint32 young_vclock = 11;</code>
     * @param int $var
     * @return $this
     */
    public function setYoungVclock($var)
    {
        GPBUtil::checkUint32($var);
        $this->young_vclock = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>uint32 big_vclock = 12;</code>
     * @return int
     */
    public function getBigVclock()
    {
        return isset($this->big_vclock) ? $this->big_vclock : 0;
    }

    public function hasBigVclock()
    {
        return isset($this->big_vclock);
    }

    public function clearBigVclock()
    {
        unset($this->big_vclock);
    }

    /**
     * Generated from protobuf field <code>uint32 big_vclock = 12;</code>
     * @param int $var
     * @return $this
     */
    public function setBigVclock($var)
    {
        GPBUtil::checkUint32($var);
        $this->big_vclock = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>uint32 small_vclock = 13;</code>
     * @return int
     */
    public function getSmallVclock()
    {
        return isset($this->small_vclock) ? $this->small_vclock : 0;
    }

    public function hasSmallVclock()
    {
        return isset($this->small_vclock);
    }

    public function clearSmallVclock()
    {
        unset($this->small_vclock);
    }

    /**
     * Generated from protobuf field <code>uint32 small_vclock = 13;</code>
     * @param int $var
     * @return $this
     */
    public function setSmallVclock($var)
    {
        GPBUtil::checkUint32($var);
        $this->small_vclock = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>uint32 pr = 14;</code>
     * @return int
     */
    public function getPr()
    {
        return isset($this->pr) ? $this->pr : 0;
    }

    public function hasPr()
    {
        return isset($this->pr);
    }

    public function clearPr()
    {
        unset($this->pr);
    }

    /**
     * Generated from protobuf field <code>uint32 pr = 14;</code>
     * @param int $var
     * @return $this
     */
    public function setPr($var)
    {
        GPBUtil::checkUint32($var);
        $this->pr = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>uint32 r = 15;</code>
     * @return int
     */
    public function getR()
    {
        return isset($this->r) ? $this->r : 0;
    }

    public function hasR()
    {
        return isset($this->r);
    }

    public function clearR()
    {
        unset($this->r);
    }

    /**
     * Generated from protobuf field <code>uint32 r = 15;</code>
     * @param int $var
     * @return $this
     */
    public function setR($var)
    {
        GPBUtil::checkUint32($var);
        $this->r = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>uint32 w = 16;</code>
     * @return int
     */
    public function getW()
    {
        return isset($this->w) ? $this->w : 0;
    }

    public function hasW()
    {
        return isset($this->w);
    }

    public function clearW()
    {
        unset($this->w);
    }

    /**
     * Generated from protobuf field <code>uint32 w = 16;</code>
     * @param int $var
     * @return $this
     */
    public function setW($var)
    {
        GPBUtil::checkUint32($var);
        $this->w = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>uint32 pw = 17;</code>
     * @return int
     */
    public function getPw()
    {
        return isset($this->pw) ? $this->pw : 0;
    }

    public function hasPw()
    {
        return isset($this->pw);
    }

    public function clearPw()
    {
        unset($this->pw);
    }

    /**
     * Generated from protobuf field <code>uint32 pw = 17;</code>
     * @param int $var
     * @return $this
     */
    public function setPw($var)
    {
        GPBUtil::checkUint32($var);
        $this->pw = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>uint32 dw = 18;</code>
     * @return int
     */
    public function getDw()
    {
        return isset($this->dw) ? $this->dw : 0;
    }

    public function hasDw()
    {
        return isset($this->dw);
    }

    public function clearDw()
    {
        unset($this->dw);
    }

    /**
     * Generated from protobuf field <code>uint32 dw = 18;</code>
     * @param int $var
     * @return $this
     */
    public function setDw($var)
    {
        GPBUtil::checkUint32($var);
        $this->dw = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>uint32 rw = 19;</code>
     * @return int
     */
    public function getRw()
    {
        return isset($this->rw) ? $this->rw : 0;
    }

    public function hasRw()
    {
        return isset($this->rw);
    }

    public function clearRw()
    {
        unset($this->rw);
    }

    /**
     * Generated from protobuf field <code>uint32 rw = 19;</code>
     * @param int $var
     * @return $this
     */
    public function setRw($var)
    {
        GPBUtil::checkUint32($var);
        $this->rw = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>bool basic_quorum = 20;</code>
     * @return bool
     */
    public function getBasicQuorum()
    {
        return isset($this->basic_quorum) ? $this->basic_quorum : false;
    }

    public function hasBasicQuorum()
    {
        return isset($this->basic_quorum);
    }

    public function clearBasicQuorum()
    {
        unset($this->basic_quorum);
    }

    /**
     * Generated from protobuf field <code>bool basic_quorum = 20;</code>
     * @param bool $var
     * @return $this
     */
    public function setBasicQuorum($var)
    {
        GPBUtil::checkBool($var);
        $this->basic_quorum = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>bool notfound_ok = 21;</code>
     * @return bool
     */
    public function getNotfoundOk()
    {
        return isset($this->notfound_ok) ? $this->notfound_ok : false;
    }

    public function hasNotfoundOk()
    {
        return isset($this->notfound_ok);
    }

    public function clearNotfoundOk()
    {
        unset($this->notfound_ok);
    }

    /**
     * Generated from protobuf field <code>bool notfound_ok = 21;</code>
     * @param bool $var
     * @return $this
     */
    public function setNotfoundOk($var)
    {
        GPBUtil::checkBool($var);
        $this->notfound_ok = $var;

        return $this;
    }

    /**
     * Used by riak_kv_multi_backend
     *
     * Generated from protobuf field <code>bytes backend = 22;</code>
     * @return string
     */
    public function getBackend()
    {
        return isset($this->backend) ? $this->backend : '';
    }

    public function hasBackend()
    {
        return isset($this->backend);
    }

    public function clearBackend()
    {
        unset($this->backend);
    }

    /**
     * Used by riak_kv_multi_backend
     *
     * Generated from protobuf field <code>bytes backend = 22;</code>
     * @param string $var
     * @return $this
     */
    public function setBackend($var)
    {
        GPBUtil::checkString($var, False);
        $this->backend = $var;

        return $this;
    }

    /**
     * Used by riak_search bucket fixup
     *
     * Generated from protobuf field <code>bool search = 23;</code>
     * @return bool
     */
    public function getSearch()
    {
        return isset($this->search) ? $this->search : false;
    }

    public function hasSearch()
    {
        return isset($this->search);
    }

    public function clearSearch()
    {
        unset($this->search);
    }

    /**
     * Used by riak_search bucket fixup
     *
     * Generated from protobuf field <code>bool search = 23;</code>
     * @param bool $var
     * @return $this
     */
    public function setSearch($var)
    {
        GPBUtil::checkBool($var);
        $this->search = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>.RpbBucketProps.RpbReplMode repl = 24;</code>
     * @return int
     */
    public function getRepl()
    {
        return isset($this->repl) ? $this->repl : 0;
    }

    public function hasRepl()
    {
        return isset($this->repl);
    }

    public function clearRepl()
    {
        unset($this->repl);
    }

    /**
     * Generated from protobuf field <code>.RpbBucketProps.RpbReplMode repl = 24;</code>
     * @param int $var
     * @return $this
     */
    public function setRepl($var)
    {
        GPBUtil::checkEnum($var, \Basho\Riak\Api\Pb\Message\RpbBucketProps\RpbReplMode::class);
        $this->repl = $var;

        return $this;
    }

    /**
     * Search index
     *
     * Generated from protobuf field <code>bytes search_index = 25;</code>
     * @return string
     */
    public function getSearchIndex()
    {
        return isset($this->search_index) ? $this->search_index : '';
    }

    public function hasSearchIndex()
    {
        return isset($this->search_index);
    }

    public function clearSearchIndex()
    {
        unset($this->search_index);
    }

    /**
     * Search index
     *
     * Generated from protobuf field <code>bytes search_index = 25;</code>
     * @param string $var
     * @return $this
     */
    public function setSearchIndex($var)
    {
        GPBUtil::checkString($var, False);
        $this->search_index = $var;

        return $this;
    }

    /**
     * KV Datatypes
     *
     * Generated from protobuf field <code>bytes datatype = 26;</code>
     * @return string
     */
    public function getDatatype()
    {
        return isset($this->datatype) ? $this->datatype : '';
    }

    public function hasDatatype()
    {
        return isset($this->datatype);
    }

    public function clearDatatype()
    {
        unset($this->datatype);
    }

    /**
     * KV Datatypes
     *
     * Generated from protobuf field <code>bytes datatype = 26;</code>
     * @param string $var
     * @return $this
     */
    public function setDatatype($var)
    {
        GPBUtil::checkString($var, False);
        $this->datatype = $var;

        return $this;
    }

    /**
     * KV strong consistency
     *
     * Generated from protobuf field <code>bool consistent = 27;</code>
     * @return bool
     */
    public function getConsistent()
    {
        return isset($this->consistent) ? $this->consistent : false;
    }

    public function hasConsistent()
    {
        return isset($this->consistent);
    }

    public function clearConsistent()
    {
        unset($this->consistent);
    }

    /**
     * KV strong consistency
     *
     * Generated from protobuf field <code>bool consistent = 27;</code>
     * @param bool $var
     * @return $this
     */
    public function setConsistent($var)
    {
        GPBUtil::checkBool($var);
        $this->consistent = $var;

        return $this;
    }

    /**
     * KV fast path
     *
     * Generated from protobuf field <code>bool write_once = 28;</code>
     * @return bool
     */
    public function getWriteOnce()
    {
        return isset($this->write_once) ? $this->write_once : false;
    }

    public function hasWriteOnce()
    {
        return isset($this->write_once);
    }

    public function clearWriteOnce()
    {
        unset($this->write_once);
    }

    /**
     * KV fast path
     *
     * Generated from protobuf field <code>bool write_once = 28;</code>
     * @param bool $var
     * @return $this
     */
    public function setWriteOnce($var)
    {
        GPBUtil::checkBool($var);
        $this->write_once = $var;

        return $this;
    }

    /**
     * Hyperlolog DT Precision
     *
     * Generated from protobuf field <code>uint32 hll_precision = 29;</code>
     * @return int
     */
    public function getHllPrecision()
    {
        return isset($this->hll_precision) ? $this->hll_precision : 0;
    }

    public function hasHllPrecision()
    {
        return isset($this->hll_precision);
    }

    public function clearHllPrecision()
    {
        unset($this->hll_precision);
    }

    /**
     * Hyperlolog DT Precision
     *
     * Generated from protobuf field <code>uint32 hll_precision = 29;</code>
     * @param int $var
     * @return $this
     */
    public function setHllPrecision($var)
    {
        GPBUtil::checkUint32($var);
        $this->hll_precision = $var;

        return $this;
    }

    /**
     * KV sweeper object expiry time
     *
     * Generated from protobuf field <code>uint32 ttl = 30;</code>
     * @return int
     */
    public function getTtl()
    {
        return isset($this->ttl) ? $this->ttl : 0;
    }

    public function hasTtl()
    {
        return isset($this->ttl);
    }

    public function clearTtl()
    {
        unset($this->ttl);
    }

    /**
     * KV sweeper object expiry time
     *
     * Generated from protobuf field <code>uint32 ttl = 30;</code>
     * @param int $var
     * @return $this
     */
    public function setTtl($var)
    {
        GPBUtil::checkUint32($var);
        $this->ttl = $var;

        return $this;
    }

}

