<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: riak_kv.proto

namespace Basho\Riak\Api\Pb\Message;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Request a segmented coverage plan for the specified bucket
 *
 * Generated from protobuf message <code>RpbCoverageReq</code>
 */
class RpbCoverageReq extends \Google\Protobuf\Internal\Message
{
    /**
     * Bucket type, if not set we assume the 'default' type
     *
     * Generated from protobuf field <code>bytes type = 1;</code>
     */
    protected $type = null;
    /**
     * Generated from protobuf field <code>bytes bucket = 2;</code>
     */
    protected $bucket = '';
    /**
     * If undefined, we build a normal coverage plan. If <ring_size, we build a coverage plan with exactly ring_size entries, anything larger will have a power of 2 entries covering keyspaces smaller than a partition
     *
     * Generated from protobuf field <code>uint32 min_partitions = 3;</code>
     */
    protected $min_partitions = null;
    /**
     * For failure recovery
     *
     * Generated from protobuf field <code>bytes replace_cover = 4;</code>
     */
    protected $replace_cover = null;
    /**
     * Other coverage contexts that have failed to assist Riak in deciding what nodes to avoid
     *
     * Generated from protobuf field <code>repeated bytes unavailable_cover = 5;</code>
     */
    private $unavailable_cover;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $type
     *           Bucket type, if not set we assume the 'default' type
     *     @type string $bucket
     *     @type int $min_partitions
     *           If undefined, we build a normal coverage plan. If <ring_size, we build a coverage plan with exactly ring_size entries, anything larger will have a power of 2 entries covering keyspaces smaller than a partition
     *     @type string $replace_cover
     *           For failure recovery
     *     @type string[]|\Google\Protobuf\Internal\RepeatedField $unavailable_cover
     *           Other coverage contexts that have failed to assist Riak in deciding what nodes to avoid
     * }
     */
    public function __construct($data = NULL) {
        \Basho\Riak\Api\Pb\Message\RiakKv::initOnce();
        parent::__construct($data);
    }

    /**
     * Bucket type, if not set we assume the 'default' type
     *
     * Generated from protobuf field <code>bytes type = 1;</code>
     * @return string
     */
    public function getType()
    {
        return isset($this->type) ? $this->type : '';
    }

    public function hasType()
    {
        return isset($this->type);
    }

    public function clearType()
    {
        unset($this->type);
    }

    /**
     * Bucket type, if not set we assume the 'default' type
     *
     * Generated from protobuf field <code>bytes type = 1;</code>
     * @param string $var
     * @return $this
     */
    public function setType($var)
    {
        GPBUtil::checkString($var, False);
        $this->type = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>bytes bucket = 2;</code>
     * @return string
     */
    public function getBucket()
    {
        return $this->bucket;
    }

    /**
     * Generated from protobuf field <code>bytes bucket = 2;</code>
     * @param string $var
     * @return $this
     */
    public function setBucket($var)
    {
        GPBUtil::checkString($var, False);
        $this->bucket = $var;

        return $this;
    }

    /**
     * If undefined, we build a normal coverage plan. If <ring_size, we build a coverage plan with exactly ring_size entries, anything larger will have a power of 2 entries covering keyspaces smaller than a partition
     *
     * Generated from protobuf field <code>uint32 min_partitions = 3;</code>
     * @return int
     */
    public function getMinPartitions()
    {
        return isset($this->min_partitions) ? $this->min_partitions : 0;
    }

    public function hasMinPartitions()
    {
        return isset($this->min_partitions);
    }

    public function clearMinPartitions()
    {
        unset($this->min_partitions);
    }

    /**
     * If undefined, we build a normal coverage plan. If <ring_size, we build a coverage plan with exactly ring_size entries, anything larger will have a power of 2 entries covering keyspaces smaller than a partition
     *
     * Generated from protobuf field <code>uint32 min_partitions = 3;</code>
     * @param int $var
     * @return $this
     */
    public function setMinPartitions($var)
    {
        GPBUtil::checkUint32($var);
        $this->min_partitions = $var;

        return $this;
    }

    /**
     * For failure recovery
     *
     * Generated from protobuf field <code>bytes replace_cover = 4;</code>
     * @return string
     */
    public function getReplaceCover()
    {
        return isset($this->replace_cover) ? $this->replace_cover : '';
    }

    public function hasReplaceCover()
    {
        return isset($this->replace_cover);
    }

    public function clearReplaceCover()
    {
        unset($this->replace_cover);
    }

    /**
     * For failure recovery
     *
     * Generated from protobuf field <code>bytes replace_cover = 4;</code>
     * @param string $var
     * @return $this
     */
    public function setReplaceCover($var)
    {
        GPBUtil::checkString($var, False);
        $this->replace_cover = $var;

        return $this;
    }

    /**
     * Other coverage contexts that have failed to assist Riak in deciding what nodes to avoid
     *
     * Generated from protobuf field <code>repeated bytes unavailable_cover = 5;</code>
     * @return \Google\Protobuf\Internal\RepeatedField
     */
    public function getUnavailableCover()
    {
        return $this->unavailable_cover;
    }

    /**
     * Other coverage contexts that have failed to assist Riak in deciding what nodes to avoid
     *
     * Generated from protobuf field <code>repeated bytes unavailable_cover = 5;</code>
     * @param string[]|\Google\Protobuf\Internal\RepeatedField $var
     * @return $this
     */
    public function setUnavailableCover($var)
    {
        $arr = GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::BYTES);
        $this->unavailable_cover = $arr;

        return $this;
    }

}

